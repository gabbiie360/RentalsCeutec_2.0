{"version":3,"sources":["login.test.js"],"names":["login","require","describe","it","mockCredentials","username","password","result","expect","toEqual","success","message","rejects","toThrow","jest","spyOn","global","mockImplementation","Promise","reject","Error","fetch","mockRestore"],"mappings":";;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAArB,C,CAA6C;;;AAE7CC,QAAQ,CAAC,mCAAD,EAAsC,YAAM;AAClDC,EAAAA,EAAE,CAAC,oEAAD,EAAuE;AAAA;AAAA;AAAA;AAAA;AAAA;AACjEC,YAAAA,eADiE,GAC/C;AAAEC,cAAAA,QAAQ,EAAE,UAAZ;AAAwBC,cAAAA,QAAQ,EAAE;AAAlC,aAD+C;AAAA;AAAA,4CAElDN,KAAK,CAACI,eAAD,CAF6C;;AAAA;AAEjEG,YAAAA,MAFiE;AAIvEC,YAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuB;AAAEC,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,OAAO,EAAE;AAA1B,aAAvB;;AAJuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvE,CAAF;AAOAR,EAAAA,EAAE,CAAC,yEAAD,EAA4E;AAAA;AAAA;AAAA;AAAA;AAAA;AACtEC,YAAAA,eADsE,GACpD;AAAEC,cAAAA,QAAQ,EAAE,UAAZ;AAAwBC,cAAAA,QAAQ,EAAE;AAAlC,aADoD;AAAA;AAAA,4CAEvDN,KAAK,CAACI,eAAD,CAFkD;;AAAA;AAEtEG,YAAAA,MAFsE;AAI5EC,YAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuB;AAAEC,cAAAA,OAAO,EAAE,KAAX;AAAkBC,cAAAA,OAAO,EAAE;AAA3B,aAAvB;;AAJ4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5E,CAAF;AAOAR,EAAAA,EAAE,CAAC,uEAAD,EAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AACpEC,YAAAA,eADoE,GAClD;AAAEC,cAAAA,QAAQ,EAAE,EAAZ;AAAgBC,cAAAA,QAAQ,EAAE;AAA1B,aADkD;AAAA;AAAA,4CAGpEE,MAAM,CAACR,KAAK,CAACI,eAAD,CAAN,CAAN,CAA+BQ,OAA/B,CAAuCC,OAAvC,CAA+C,6CAA/C,CAHoE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1E,CAAF;AAMAV,EAAAA,EAAE,CAAC,6DAAD,EAAgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1DC,YAAAA,eAD0D,GACxC;AAAEC,cAAAA,QAAQ,EAAE,UAAZ;AAAwBC,cAAAA,QAAQ,EAAE;AAAlC,aADwC,EAGhE;;AACAQ,YAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmB,OAAnB,EAA4BC,kBAA5B,CAA+C;AAAA,qBAC7CC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,oBAAV,CAAf,CAD6C;AAAA,aAA/C;AAJgE;AAAA,4CAQ1DZ,MAAM,CAACR,KAAK,CAACI,eAAD,CAAN,CAAN,CAA+BQ,OAA/B,CAAuCC,OAAvC,CAA+C,oBAA/C,CAR0D;;AAAA;AAUhE;AACAG,YAAAA,MAAM,CAACK,KAAP,CAAaC,WAAb;;AAXgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhE,CAAF;AAaD,CAlCO,CAAR","sourcesContent":["\r\n\r\nconst login = require('../assets/js/login'); // Ajusta la ruta según tu proyecto\r\n\r\ndescribe('Funcionalidad de inicio de sesión', () => {\r\n  it('debería devolver éxito cuando se proporcionan credenciales válidas', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'password123' };\r\n    const result = await login(mockCredentials);\r\n\r\n    expect(result).toEqual({ success: true, message: 'Inicio de sesión exitoso' });\r\n  });\r\n\r\n  it('debería devolver un error cuando se proporcionan credenciales inválidas', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'wrongpassword' };\r\n    const result = await login(mockCredentials);\r\n\r\n    expect(result).toEqual({ success: false, message: 'Credenciales inválidas' });\r\n  });\r\n\r\n  it('debería lanzar un error si falta el nombre de usuario o la contraseña', async () => {\r\n    const mockCredentials = { username: '', password: '' };\r\n\r\n    await expect(login(mockCredentials)).rejects.toThrow('Se requieren nombre de usuario y contraseña');\r\n  });\r\n\r\n  it('debería manejar los errores del servidor de manera adecuada', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'password123' };\r\n\r\n    // Simula un error del servidor\r\n    jest.spyOn(global, 'fetch').mockImplementation(() =>\r\n      Promise.reject(new Error('Error del servidor'))\r\n    );\r\n\r\n    await expect(login(mockCredentials)).rejects.toThrow('Error del servidor');\r\n\r\n    // Limpia el mock\r\n    global.fetch.mockRestore();\r\n  });\r\n});"],"file":"login.test.dev.js"}