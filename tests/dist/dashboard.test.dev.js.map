{"version":3,"sources":["dashboard.test.js"],"names":["require","actualizarRol","eliminarUsuario","editarVehiculo","guardarVehiculo","eliminarVehiculo","editarReserva","guardarReserva","eliminarReserva","validarSolapamiento","describe","test","select","value","dataset","uid","resultado","expect","toEqual","rol","mensaje","global","confirm","jest","fn","id","toHaveProperty","datos","MARCA","MODELO","PLACA","toThrow","Email","Date","solapado"],"mappings":"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","sourcesContent":["const { actualizarRol, eliminarUsuario, editarVehiculo, guardarVehiculo, eliminarVehiculo, editarReserva, guardarReserva, eliminarReserva, validarSolapamiento } = require(\"../assets/js/dashboardTest\");\r\n\r\ndescribe(\"Pruebas unitarias de dashboard\", () => {\r\n    test(\"Debería actualizar el rol de un usuario\", () => {\r\n        // Arrange\r\n        const select = { value: \"admin\", dataset: { uid: \"user123\" } };\r\n        \r\n        // Act\r\n        const resultado = actualizarRol(select);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ uid: \"user123\", rol: \"admin\", mensaje: \"Rol actualizado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería eliminar un usuario\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const uid = \"user123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarUsuario(uid);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ uid, mensaje: \"Usuario eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar un vehículo y devolver sus datos\", () => {\r\n        // Arrange\r\n        const id = \"vehiculo1\";\r\n        \r\n        // Act\r\n        const resultado = editarVehiculo(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"MARCA\", \"Toyota\");\r\n        expect(resultado).toHaveProperty(\"MODELO\", \"Corolla\");\r\n        expect(resultado).toHaveProperty(\"PLACA\", \"ABC-123\");\r\n    });\r\n\r\n    test(\"Debería guardar un vehículo correctamente\", () => {\r\n        // Arrange\r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\", PLACA: \"ABC-123\" };\r\n        \r\n        // Act\r\n        const resultado = guardarVehiculo(datos);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Vehículo guardado correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar un vehículo\", () => {\r\n        // Arrange\r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\" }; // Falta la placa\r\n        \r\n        // Act & Assert\r\n        expect(() => guardarVehiculo(datos)).toThrow(\"Todos los campos del vehículo son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar un vehículo\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"vehiculo123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarVehiculo(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ id, mensaje: \"Vehículo eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar una reserva y devolver sus datos\", () => {\r\n        // Arrange\r\n        const id = \"reserva1\";\r\n        \r\n        // Act\r\n        const resultado = editarReserva(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"Nombre Completo\", \"Juan Pérez\");\r\n        expect(resultado).toHaveProperty(\"Email\", \"juan.perez@example.com\");\r\n    });\r\n\r\n    test(\"Debería guardar una reserva correctamente\", () => {\r\n        // Arrange\r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\", \"Numero de Telefono\": \"12345678\" };\r\n        \r\n        // Act\r\n        const resultado = guardarReserva(datos);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Reserva guardada correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar una reserva\", () => {\r\n        // Arrange\r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\" }; // Falta el teléfono\r\n        \r\n        // Act & Assert\r\n        expect(() => guardarReserva(datos)).toThrow(\"Todos los campos son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar una reserva\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"reserva123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarReserva(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ id, mensaje: \"Reserva eliminada correctamente.\" });\r\n    });\r\n    test(\"Debería detectar solapamiento con una reserva existente\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: true, mensaje: \"Conflicto de reserva detectado.\" });\r\n    });\r\n\r\n    test(\"No debería detectar solapamiento si las fechas no se cruzan\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-07T09:00\"), new Date(\"2025-04-08T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n\r\n    test(\"No debería detectar solapamiento si el ID de vehículo no coincide\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo999\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n\r\n    test(\"Debería ignorar una reserva si es la misma que está siendo editada\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"), \"reserva1\");\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n});\r\n"],"file":"dashboard.test.dev.js"}