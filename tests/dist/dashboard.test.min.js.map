{"version":3,"sources":["dashboard.test.js"],"names":["require","actualizarRol","eliminarUsuario","editarVehiculo","guardarVehiculo","eliminarVehiculo","editarReserva","guardarReserva","eliminarReserva","validarSolapamiento","describe","value","uid","toEqual","mensaje","test","select","confirm","jest","fn","resultado","expect","toHaveProperty","MARCA","MODELO","PLACA","id","datos","toThrow","Nombre Completo","Email","Numero de Telefono","global","Date","solapado"],"mappings":"0BAAmKA,QAAQ,8BAAnKC,uBAAAA,cAAeC,yBAAAA,gBAAiBC,wBAAAA,eAAgBC,yBAAAA,gBAAiBC,0BAAAA,iBAAkBC,uBAAAA,cAAeC,wBAAAA,eAAgBC,yBAAAA,gBAAiBC,6BAAAA,oBAE3IC,SAAS,iCAFkK,WAAnKT,KAAAA,0CAG4C,WAHZE,IAAmDG,EAQjEL,cAHH,CAAEU,MALeR,QAAAA,QAKU,CAAES,IAAK,aALkFH,OAAAA,GAWjHI,QAAQ,CAXyGJ,IAAAA,UAAAA,IAWlF,QAASK,QAAS,qCARvEC,KAAK,8BAAA,WAEKC,OAAMC,QAAGC,KAAAC,GAAA,WAAA,OAAA,IAAER,IAAOC,EAAT,UAA2BQ,EAAAlB,gBAAAU,GAGpCQ,OAAAA,GAAYnB,QAAce,CAAAA,IAAAA,EAAhCF,QAEA,uCAC4BF,KAAG,kDAAL,WAAgCE,IAGzDM,EAAAjB,eAHkE,aAK1CkB,OAAMD,GAANE,eAAA,QAAA,UAAzBD,OAAAD,GAAAE,eAAA,SAAA,WACMV,OAAMQ,GAEZE,eAAA,QAAA,aAoBJP,KAAK,4CAA6C,WAhBlBH,IAThCQ,EAAAhB,gBAS8B,CAAAmB,MAAA,SAAAC,OAAA,UAAAC,MAAA,YAKpBC,OAAKN,GAEXE,eAAA,UAAA,sCAoBJP,KAAK,iEAAkE,WAfnEM,IAAOD,EAAWE,CAAAA,MAAAA,SAAeE,OAAU,WAI1CH,OAAA,WAAA,OAAAjB,gBAAAuB,KAAAC,QAA6C,qDAE9BL,KAAAA,+BAAF,WAAsCE,OAAOR,QAAAC,KAAAC,GAAA,WAAA,OAAA,IAE3D,IAAAO,EAAA,cAqBMN,EAAYf,iBAAiBqB,GAdlCL,OAAAD,GAAAP,QAAA,CAAAa,GAAAA,EAAAZ,QAAA,wCAEeS,KAAAA,kDAAF,WAAwC,IAG/CH,EAAAd,cAH+C,YAF1De,OAAAD,GAAAE,eAAA,kBAAA,cAQKD,OAAAD,GAAAE,eAAgC,QAAA,4BAERP,KAAA,4CAAA,WACnBW,IA0BAN,EAAYb,eA1BP,CAAAsB,kBAEX,aAAAC,MAAA,yBAAAC,qBAAA,aAIgCjB,OAASM,GAAAE,eAAA,UAAA,qCAG7CP,KAAK,iEAAyD,WAEpDW,IAAKC,EAAA,CAF+CE,kBAI1D,aAAAC,MAAA,0BAwBAT,OAAO,WAAA,OAAMd,eAAeoB,KAAQC,QAAQ,wCA5BhDb,KAAA,+BAAA,WAaIiB,OAAAf,QAAAC,KAAAC,GAAA,WAAA,OAAA,IACMQ,IAAKD,EAAG,aAAoEN,EAAAZ,gBAAsBkB,GAGlGN,OAAAA,GAAYb,QAAc,CAACoB,GAAAA,EAADb,QAEhC,uCACAO,KAAAA,0DAA4C,WAG3C,IAAAD,EAAAX,oBAAA,cAAA,IAAAwB,KAAA,oBAAwE,IAAAA,KAAA,qBAEzDZ,OAAAD,GAAmBP,QAAA,CAAAqB,UAArB,EAAApB,QAAA,sCAEdC,KAAA,8DAAA,WACAM,IAAOD,EAAAX,oBAAA,cAAA,IAAAwB,KAAA,oBAAA,IAAAA,KAAA,qBALXZ,OAAAD,GAAAP,QAAA,CAAAqB,UAAA,EAAApB,QAAA,uCAUIkB,KAAAA,oEAAyB,WAAzB,IAAAZ,EAAAX,oBAAA,cAAA,IAAAwB,KAAA,oBAAA,IAAAA,KAAA,qBAIMb,OAAAA,GAAYZ,QAAAA,CAAgBkB,UAElC,EAAAZ,QAAA,uCAC4BY,KAAE,qEAAJ,WAA1B,IAAAN,EAAAX,oBAAA,cAAA,IAAAwB,KAAA,oBAAA,IAAAA,KAAA,oBAAA,YAGAZ,OAAAD,GAAAP,QAAA,CAAAqB,UAAA,EAAApB,QAAA","file":"dashboard.test.min.js","sourcesContent":["const { actualizarRol, eliminarUsuario, editarVehiculo, guardarVehiculo, eliminarVehiculo, editarReserva, guardarReserva, eliminarReserva, validarSolapamiento } = require(\"../assets/js/dashboardTest\");\r\n\r\ndescribe(\"Pruebas unitarias de dashboard\", () => {\r\n    test(\"Debería actualizar el rol de un usuario\", () => {\r\n        // Arrange\r\n        const select = { value: \"admin\", dataset: { uid: \"user123\" } };\r\n        \r\n        // Act\r\n        const resultado = actualizarRol(select);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ uid: \"user123\", rol: \"admin\", mensaje: \"Rol actualizado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería eliminar un usuario\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const uid = \"user123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarUsuario(uid);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ uid, mensaje: \"Usuario eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar un vehículo y devolver sus datos\", () => {\r\n        // Arrange\r\n        const id = \"vehiculo1\";\r\n        \r\n        // Act\r\n        const resultado = editarVehiculo(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"MARCA\", \"Toyota\");\r\n        expect(resultado).toHaveProperty(\"MODELO\", \"Corolla\");\r\n        expect(resultado).toHaveProperty(\"PLACA\", \"ABC-123\");\r\n    });\r\n\r\n    test(\"Debería guardar un vehículo correctamente\", () => {\r\n        // Arrange\r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\", PLACA: \"ABC-123\" };\r\n        \r\n        // Act\r\n        const resultado = guardarVehiculo(datos);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Vehículo guardado correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar un vehículo\", () => {\r\n        // Arrange\r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\" }; // Falta la placa\r\n        \r\n        // Act & Assert\r\n        expect(() => guardarVehiculo(datos)).toThrow(\"Todos los campos del vehículo son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar un vehículo\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"vehiculo123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarVehiculo(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ id, mensaje: \"Vehículo eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar una reserva y devolver sus datos\", () => {\r\n        // Arrange\r\n        const id = \"reserva1\";\r\n        \r\n        // Act\r\n        const resultado = editarReserva(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"Nombre Completo\", \"Juan Pérez\");\r\n        expect(resultado).toHaveProperty(\"Email\", \"juan.perez@example.com\");\r\n    });\r\n\r\n    test(\"Debería guardar una reserva correctamente\", () => {\r\n        // Arrange\r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\", \"Numero de Telefono\": \"12345678\" };\r\n        \r\n        // Act\r\n        const resultado = guardarReserva(datos);\r\n        \r\n        // Assert\r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Reserva guardada correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar una reserva\", () => {\r\n        // Arrange\r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\" }; // Falta el teléfono\r\n        \r\n        // Act & Assert\r\n        expect(() => guardarReserva(datos)).toThrow(\"Todos los campos son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar una reserva\", () => {\r\n        // Arrange\r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"reserva123\";\r\n        \r\n        // Act\r\n        const resultado = eliminarReserva(id);\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ id, mensaje: \"Reserva eliminada correctamente.\" });\r\n    });\r\n    test(\"Debería detectar solapamiento con una reserva existente\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: true, mensaje: \"Conflicto de reserva detectado.\" });\r\n    });\r\n\r\n    test(\"No debería detectar solapamiento si las fechas no se cruzan\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-07T09:00\"), new Date(\"2025-04-08T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n\r\n    test(\"No debería detectar solapamiento si el ID de vehículo no coincide\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo999\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"));\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n\r\n    test(\"Debería ignorar una reserva si es la misma que está siendo editada\", () => {\r\n        // Arrange\r\n        const resultado = validarSolapamiento(\"vehiculo123\", new Date(\"2025-04-03T09:00\"), new Date(\"2025-04-04T09:00\"), \"reserva1\");\r\n        \r\n        // Assert\r\n        expect(resultado).toEqual({ solapado: false, mensaje: \"No hay solapamiento de reservas.\" });\r\n    });\r\n});\r\n"]}