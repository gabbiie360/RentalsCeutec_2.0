{"version":3,"sources":["dashboard.test.js"],"names":["require","actualizarRol","eliminarUsuario","editarVehiculo","guardarVehiculo","eliminarVehiculo","editarReserva","guardarReserva","eliminarReserva","describe","value","uid","expect","resultado","toEqual","rol","mensaje","test","select","dataset","confirm","jest","fn","global","toHaveProperty","id","MODELO","PLACA","MARCA","datos","toThrow","Email","Nombre Completo","Numero de Telefono"],"mappings":"0BAA8IA,QAAQ,8BAA9IC,uBAAAA,cAAeC,yBAAAA,gBAAiBC,wBAAAA,eAAgBC,yBAAAA,gBAAiBC,0BAAAA,iBAAkBC,uBAAAA,cAAeC,wBAAAA,eAAgBC,yBAAAA,gBAE1HC,SAAS,iCAF6I,WAA9IR,KAAAA,0CAG4C,WAHZE,IAAmDG,EAQjEL,cAHH,CAAES,MALeP,QAAAA,QAKU,CAAEQ,IAAK,aAMjDC,OAAOC,GAAWC,QAAQ,CAAEH,IAAK,UAAWI,IAAK,QAASC,QAAS,qCANnEC,KAAMC,8BAAS,WAAkBC,OAASC,QAAAC,KAAAC,GAAA,WAAA,OAAA,IAAEX,IAAKA,EAAA,UAG3CE,EAAYZ,gBAAlBU,GAG4CI,OAAKF,GAAvBC,QAAA,CAAAH,IAAAA,EAAAK,QAAA,uCAR9BC,KAAA,kDAAA,WAaIM,IACYV,EAAZV,eADA,aAO4BQ,OAAFE,GAAAW,eAAA,QAAA,UAAOR,OAASH,GAAAW,eAAA,SAAA,WAA1CZ,OAAAC,GAAAW,eAAA,QAAA,aAKAP,KAAMQ,4CAAN,WAMAb,IARJC,EAAAT,gBAQsBoB,CAAAA,MAAAA,SAAeE,OAAS,UAA1CC,MAAA,YAOgBC,OAAOf,GAATW,eAAA,UAAA,sCAAAP,KAAd,iEAAA,WAMAL,IAAOC,EAAWW,CAAAA,MAAAA,SAAeE,OAAW,WAKtCG,OAAK,WAAA,OAAGzB,gBAAAyB,KAAAC,QAAA,qDAAAb,KAAwC,+BAAA,WAGtDL,OAAOQ,QAAAC,KAAAC,GAAA,WAAA,OAAA,IAAA,IAAMlB,EAAAA,cAGZS,EAAAR,iBAAgCoB,GAEjCb,OAAAC,GAAAC,QAAA,CAAAW,GAAAA,EAAAT,QAAA,wCAOAJ,KAAAA,kDAA0B,WAAMI,IAG/BH,EAAAP,cAHwC,YAWzCM,OAAOC,GAAWW,eAAe,kBAAmB,cACpDZ,OAAOC,GAAWW,eAAe,QAAS,4BAK1CP,KAAMY,4CAAQ,WAAmCE,IAG3ClB,EAAYN,eAHsC,CAAAyB,kBAA1C,aAAAD,MAAA,yBAAAE,qBAAA,aASbrB,OAAAC,GAAAW,eAAA,UAAA,qCAEgDO,KAAAA,iEAAO,WAAxD,IAAMF,EAAQ,CAAEG,kBAAmB,aAAcD,MAAO,0BAGpBD,OAAQ,WAAA,OAAAvB,eAAAsB,KAAAC,QAA5C,wCAKAP,KAAAA,+BAAyB,WAAzBA,OAAAH,QAAAC,KAAAC,GAAA,WAAA,OAAA,IACMG,IAAKA,EAAA,aAMeZ,EAAAL,gBAAAiB,GAT9Bb,OAAAC,GAAAC,QAAA,CAAAW,GAAAA,EAAAT,QAAA","file":"dashboard.test.min.js","sourcesContent":["const { actualizarRol, eliminarUsuario, editarVehiculo, guardarVehiculo, eliminarVehiculo, editarReserva, guardarReserva, eliminarReserva } = require(\"../assets/js/dashboardTest\");\r\n\r\ndescribe(\"Pruebas unitarias de dashboard\", () => {\r\n    test(\"Debería actualizar el rol de un usuario\", () => {\r\n        \r\n        const select = { value: \"admin\", dataset: { uid: \"user123\" } };\r\n        \r\n      \r\n        const resultado = actualizarRol(select);\r\n        \r\n      \r\n        expect(resultado).toEqual({ uid: \"user123\", rol: \"admin\", mensaje: \"Rol actualizado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería eliminar un usuario\", () => {\r\n       \r\n        global.confirm = jest.fn(() => true);\r\n        const uid = \"user123\";\r\n        \r\n     \r\n        const resultado = eliminarUsuario(uid);\r\n        \r\n        \r\n        expect(resultado).toEqual({ uid, mensaje: \"Usuario eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar un vehículo y devolver sus datos\", () => {\r\n      \r\n        const id = \"vehiculo1\";\r\n        \r\n       \r\n        const resultado = editarVehiculo(id);\r\n        \r\n        \r\n        expect(resultado).toHaveProperty(\"MARCA\", \"Toyota\");\r\n        expect(resultado).toHaveProperty(\"MODELO\", \"Corolla\");\r\n        expect(resultado).toHaveProperty(\"PLACA\", \"ABC-123\");\r\n    });\r\n\r\n    test(\"Debería guardar un vehículo correctamente\", () => {\r\n        \r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\", PLACA: \"ABC-123\" };\r\n        \r\n        \r\n        const resultado = guardarVehiculo(datos);\r\n        \r\n\r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Vehículo guardado correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar un vehículo\", () => {\r\n        \r\n        const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\" }; // Falta la placa\r\n        \r\n       \r\n        expect(() => guardarVehiculo(datos)).toThrow(\"Todos los campos del vehículo son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar un vehículo\", () => {\r\n        \r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"vehiculo123\";\r\n        \r\n      \r\n        const resultado = eliminarVehiculo(id);\r\n        \r\n       \r\n        expect(resultado).toEqual({ id, mensaje: \"Vehículo eliminado correctamente.\" });\r\n    });\r\n\r\n    test(\"Debería editar una reserva y devolver sus datos\", () => {\r\n       \r\n        const id = \"reserva1\";\r\n        \r\n        \r\n        const resultado = editarReserva(id);\r\n        \r\n        \r\n        expect(resultado).toHaveProperty(\"Nombre Completo\", \"Juan Pérez\");\r\n        expect(resultado).toHaveProperty(\"Email\", \"juan.perez@example.com\");\r\n    });\r\n\r\n    test(\"Debería guardar una reserva correctamente\", () => {\r\n        \r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\", \"Numero de Telefono\": \"12345678\" };\r\n        \r\n        \r\n        const resultado = guardarReserva(datos);\r\n        \r\n        \r\n        expect(resultado).toHaveProperty(\"mensaje\", \"Reserva guardada correctamente.\");\r\n    });\r\n\r\n    test(\"Debería lanzar un error si faltan datos al guardar una reserva\", () => {\r\n      \r\n        const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\" }; // Falta el teléfono\r\n        \r\n        \r\n        expect(() => guardarReserva(datos)).toThrow(\"Todos los campos son obligatorios.\");\r\n    });\r\n\r\n    test(\"Debería eliminar una reserva\", () => {\r\n        \r\n        global.confirm = jest.fn(() => true);\r\n        const id = \"reserva123\";\r\n        \r\n        \r\n        const resultado = eliminarReserva(id);\r\n        \r\n      \r\n        expect(resultado).toEqual({ id, mensaje: \"Reserva eliminada correctamente.\" });\r\n    });\r\n});\r\n"]}