{"version":3,"sources":["login.test.js"],"names":["require","obtenerRol","signInWithEmail","describe","rol","uid","test","expect","toBe","email","toBeNull","result","toEqual","user","toThrow"],"mappings":"0BAAwCA,QAAQ,0BAAxCC,oBAAAA,WAAYC,yBAAAA,gBAGpBC,SAHQF,qCAGuC,WAH3BC,KAAAA,uDAAwD,WAMpE,IADAE,EAAAH,WACY,SAGNG,OAAMH,GAAAA,KAAWI,WAL3BC,KAAA,qDAAA,WAYI,IAIYL,EAAAA,WAJZ,QADJM,OAAAH,GAAAI,KAAA,UAaIF,KAAMD,kDAEN,WACMD,IALVA,EAAAH,WAKgBA,eAQNQ,OAAKL,GAAGM,aAIdJ,KAAMK,4DAEN,WACAJ,IACUI,EAAAT,gBADKU,oBACL,YAITL,OAAAI,GAAAC,QAAA,CACDC,KAAA,CAAAR,IAAA,QAAAI,MAAA,yBAKAH,KAAMK,4DAEN,WACAJ,IACUI,EAAAT,gBADKU,mBACL,WAITL,OAAAI,GAAAC,QAAA,CACDC,KAAA,CAAAR,IAAA,OAAAI,MAAA,wBAKAF,KAAAA,yEAAO,WAKDH,OAAMH,WAAAA,OAAAA,gBAL2C,yBAN3D,WAaIa,QAAA,4BAJJR,KAAK,uDAAwD,WAA7D,IAAAF,EAAAH,WAAA,SAQIM,OAOA,UAFuBH,EAEvB,iBAAA,iBAPoBI,KAAK,oBA/EjCF,KAAA,qDAAA,WAoFQ,IAAMF,EAAMH,WAAW,QAMvBM,OAH4B,UAARH,EAAkB,iBAAmB,iBAGrCI,KAAK","file":"login.test.min.js","sourcesContent":["const { obtenerRol, signInWithEmail } = require(\"../assets/js/loginTest\");  // ✅\r\n\r\n\r\ndescribe(\"Pruebas unitarias de autenticación\", () => {\r\n    test(\"Debería retornar el rol 'admin' para el UID de Maria\", () => {\r\n        // Arrange\r\n        const uid = \"maria\";\r\n\r\n        // Act\r\n        const rol = obtenerRol(uid);\r\n\r\n        // Assert\r\n        expect(rol).toBe(\"admin\");\r\n    });\r\n\r\n    test(\"Debería retornar el rol 'user' para el UID de Juan\", () => {\r\n        // Arrange\r\n        const uid = \"juan\";\r\n\r\n        // Act\r\n        const rol = obtenerRol(uid);\r\n\r\n        // Assert\r\n        expect(rol).toBe(\"user\");\r\n    });\r\n\r\n    test(\"Debería retornar 'null' para un UID desconocido\", () => {\r\n        // Arrange\r\n        const uid = \"desconocido\";\r\n\r\n        // Act\r\n        const rol = obtenerRol(uid);\r\n\r\n        // Assert\r\n        expect(rol).toBeNull();\r\n    });\r\n\r\n    test(\"Debería iniciar sesión correctamente con el usuario admin\", () => {\r\n        // Arrange\r\n        const email = \"maria@example.com\";\r\n        const password = \"admin123\";\r\n\r\n        // Act\r\n        const result = signInWithEmail(email, password);\r\n\r\n        // Assert\r\n        expect(result).toEqual({\r\n            user: { uid: \"maria\", email: \"maria@example.com\" }\r\n        });\r\n    });\r\n\r\n    test(\"Debería iniciar sesión correctamente con el usuario común\", () => {\r\n        // Arrange\r\n        const email = \"juan@example.com\";\r\n        const password = \"user123\";\r\n\r\n        // Act\r\n        const result = signInWithEmail(email, password);\r\n\r\n        // Assert\r\n        expect(result).toEqual({\r\n            user: { uid: \"juan\", email: \"juan@example.com\" }\r\n        });\r\n    });\r\n\r\n    test(\"Debería lanzar un error al iniciar sesión con credenciales incorrectas\", () => {\r\n        // Arrange\r\n        const email = \"incorrecto@example.com\";\r\n        const password = \"wrong\";\r\n\r\n        // Act & Assert\r\n        expect(() => signInWithEmail(email, password)).toThrow(\"Credenciales inválidas\");\r\n    });\r\n\r\n    test(\"Debería devolver 'dashboard.html' si el rol es admin\", () => {\r\n        // Arrange\r\n        const rol = obtenerRol(\"maria\");\r\n\r\n        // Act\r\n        const redireccion = rol === \"admin\" ? \"dashboard.html\" : \"clientes.html\";\r\n\r\n        // Assert\r\n        expect(redireccion).toBe(\"dashboard.html\");\r\n    });\r\n\r\n    test(\"Debería devolver 'clientes.html' si el rol es user\", () => {\r\n        // Arrange\r\n        const rol = obtenerRol(\"juan\");\r\n\r\n        // Act\r\n        const redireccion = rol === \"admin\" ? \"dashboard.html\" : \"clientes.html\";\r\n\r\n        // Assert\r\n        expect(redireccion).toBe(\"clientes.html\");\r\n    });\r\n});\r\n"]}