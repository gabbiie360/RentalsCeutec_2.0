{"version":3,"sources":["login.test.js"],"names":["login","require","describe","mockCredentials","result","regeneratorRuntime","async","_context","prev","next","username","password","awrap","sent","expect","toEqual","success","message","stop","_context2","it","_context3","rejects","toThrow","_context4","jest","spyOn","global","mockImplementation","Promise","reject","Error","fetch","mockRestore"],"mappings":"aAEA,IAAMA,MAAQC,QAAQ,sBAEtBC,SAAS,oCAAqC,WAA9CA,GAAAA,qEAAoD,WAAA,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAC/CN,EAAA,CAAAO,SAAA,WAAAC,SAAA,eAD+CJ,EAAAE,KAAA,EAAAJ,mBAAAO,MACuBZ,MAAAG,IADvB,KAAA,EACuBC,EADvBG,EAAAM,KACuBC,OAAAV,GAAAW,QAAA,CAAAC,SAAA,EAAAC,QAAA,6BADvB,KAAA,EAAA,IAAA,MAAA,OAAAV,EAAAW,YAE1Cf,GAAAA,0EAAkB,WAAA,IAAAA,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAEC,EAAU,CAAAA,SAAZ,WAAAC,SAAA,iBAAAQ,EAAAV,KAAA,EAAAJ,mBAAAO,MAAkCZ,MAAAG,IAAlC,KAAA,EAAwBQ,EAAxBQ,EAAAN,KAD+CC,OAAAV,GAAAW,QAAA,CAAAC,SAAA,EAAAC,QAAA,2BAC/C,KAAA,EAAA,IAAA,MAAA,OAAAE,EAAAD,YAD+CE,GAAA,wEAAA,WAAA,IAAAjB,EAAA,OAAAE,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAEjEL,EAFiE,CAAAM,SAAA,GAAAC,SAAA,IAAAU,EAAAZ,KAAA,EAAAJ,mBAAAO,MAI9CI,OAAAA,MAASb,IAAXmB,QAAAC,QAAA,gDAJgD,KAAA,EAAA,IAAA,MAAA,OAAAF,EAAAH,YAoBzEE,GAAG,8DAA+D,WAAA,IAAAjB,EAAA,OAAAE,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OApBON,EAAA,CAAAO,SAAA,WAAAC,SAAA,eAAAc,KAAAC,MAAAC,OAAA,SAAAC,mBAAA,WAAA,OAAAC,QAAAC,OAAA,IAAAC,MAAA,yBAoBPP,EAAAf,KAAA,EAAAJ,mBAAAO,MAb/DE,OAAAd,MAAAG,IAAAmB,QAAAC,QAAA,uBAa+D,KAAA,EAbYI,OAAAK,MAAAC,cAaZ,KAAA,EAAA,IAAA,MAAA,OAAAT,EAAAN","file":"login.test.min.js","sourcesContent":["\r\n\r\nconst login = require('../assets/js/login'); // Ajusta la ruta según tu proyecto\r\n\r\ndescribe('Funcionalidad de inicio de sesión', () => {\r\n  it('debería devolver éxito cuando se proporcionan credenciales válidas', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'password123' };\r\n    const result = await login(mockCredentials);\r\n\r\n    expect(result).toEqual({ success: true, message: 'Inicio de sesión exitoso' });\r\n  });\r\n\r\n  it('debería devolver un error cuando se proporcionan credenciales inválidas', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'wrongpassword' };\r\n    const result = await login(mockCredentials);\r\n\r\n    expect(result).toEqual({ success: false, message: 'Credenciales inválidas' });\r\n  });\r\n\r\n  it('debería lanzar un error si falta el nombre de usuario o la contraseña', async () => {\r\n    const mockCredentials = { username: '', password: '' };\r\n\r\n    await expect(login(mockCredentials)).rejects.toThrow('Se requieren nombre de usuario y contraseña');\r\n  });\r\n\r\n  it('debería manejar los errores del servidor de manera adecuada', async () => {\r\n    const mockCredentials = { username: 'testuser', password: 'password123' };\r\n\r\n    // Simula un error del servidor\r\n    jest.spyOn(global, 'fetch').mockImplementation(() =>\r\n      Promise.reject(new Error('Error del servidor'))\r\n    );\r\n\r\n    await expect(login(mockCredentials)).rejects.toThrow('Error del servidor');\r\n\r\n    // Limpia el mock\r\n    global.fetch.mockRestore();\r\n  });\r\n});"]}