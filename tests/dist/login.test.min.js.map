{"version":3,"sources":["login.test.js"],"names":["require","obtenerRol","signInWithEmail","describe","rol","expect","toBe","test","result","user","toBeNull","email","toEqual","password","uid","redireccion","toThrow"],"mappings":"0BAAwCA,QAAQ,0BAAxCC,oBAAAA,WAAYC,yBAAAA,gBAGpBC,SAHQF,qCAGuC,WAH3BC,KAAAA,uDAAwD,WAMpE,IAAYE,EAAAH,WAAA,SAFhBI,OAAAD,GAAAE,KAAA,WAgBIC,KAAMH,qDAAN,WALJ,IAgBgBH,EAAAA,WAhBhB,QAsBKI,OAAAD,GAAAE,KAAA,UAMDC,KAAMC,kDAAN,WAIIC,IAAML,EAAAH,WAAA,eAITI,OAAAD,GAAAM,aAMDH,KAAMC,4DAAN,WAIIC,IADJD,EAAAN,gBACU,oBAAA,YAMJS,OAAKH,GAAGI,QAAA,CACRC,KAAQ,CAAGC,IAAA,QAAjBH,MAAA,yBAHJJ,KAAA,4DAAA,WAWUH,IASLI,EAAAN,gBATWD,mBAGW,WAcvBI,OAAOU,GAAPH,QAAyB,CAR7BH,KAAA,CAAAK,IAAA,OAAAH,MAAA,wBApBAJ,KAAK,yEAA0E,WAM3EF,OAAO,WAAA,OAAMH,gBAJC,yBACG,WAG8Bc,QAAQ,4BAG3DT,KAAK,uDAAwD,WAEzD,IAAMH,EAAMH,WAAW,SAMvBI,OAH4B,UAARD,EAAkB,iBAAmB,iBAGrCE,KAAK,oBAG7BC,KAAK,qDAAsD,WAEvD,IAAMH,EAAMH,WAAW,QAMvBI,OAH4B,UAARD,EAAkB,iBAAmB,iBAGrCE,KAAK","file":"login.test.min.js","sourcesContent":["const { obtenerRol, signInWithEmail } = require(\"../assets/js/loginTest\");  // ✅\r\n\r\n\r\ndescribe(\"Pruebas unitarias de autenticación\", () => {\r\n    test(\"Debería retornar el rol 'admin' para el UID de Maria\", () => {\r\n        \r\n        const uid = \"maria\";\r\n\r\n       \r\n        const rol = obtenerRol(uid);\r\n\r\n        \r\n        expect(rol).toBe(\"admin\");\r\n    });\r\n\r\n    test(\"Debería retornar el rol 'user' para el UID de Juan\", () => {\r\n       \r\n        const uid = \"juan\";\r\n\r\n        \r\n        const rol = obtenerRol(uid);\r\n\r\n     \r\n        expect(rol).toBe(\"user\");\r\n    });\r\n\r\n    test(\"Debería retornar 'null' para un UID desconocido\", () => {\r\n        \r\n        const uid = \"desconocido\";\r\n\r\n        \r\n        const rol = obtenerRol(uid);\r\n\r\n        \r\n        expect(rol).toBeNull();\r\n    });\r\n\r\n    test(\"Debería iniciar sesión correctamente con el usuario admin\", () => {\r\n      \r\n        const email = \"maria@example.com\";\r\n        const password = \"admin123\";\r\n\r\n      \r\n        const result = signInWithEmail(email, password);\r\n\r\n    \r\n        expect(result).toEqual({\r\n            user: { uid: \"maria\", email: \"maria@example.com\" }\r\n        });\r\n    });\r\n\r\n    test(\"Debería iniciar sesión correctamente con el usuario común\", () => {\r\n        \r\n        const email = \"juan@example.com\";\r\n        const password = \"user123\";\r\n\r\n        \r\n        const result = signInWithEmail(email, password);\r\n\r\n        \r\n        expect(result).toEqual({\r\n            user: { uid: \"juan\", email: \"juan@example.com\" }\r\n        });\r\n    });\r\n\r\n    test(\"Debería lanzar un error al iniciar sesión con credenciales incorrectas\", () => {\r\n    \r\n        const email = \"incorrecto@example.com\";\r\n        const password = \"wrong\";\r\n\r\n    \r\n        expect(() => signInWithEmail(email, password)).toThrow(\"Credenciales inválidas\");\r\n    });\r\n\r\n    test(\"Debería devolver 'dashboard.html' si el rol es admin\", () => {\r\n        \r\n        const rol = obtenerRol(\"maria\");\r\n\r\n        \r\n        const redireccion = rol === \"admin\" ? \"dashboard.html\" : \"clientes.html\";\r\n\r\n        \r\n        expect(redireccion).toBe(\"dashboard.html\");\r\n    });\r\n\r\n    test(\"Debería devolver 'clientes.html' si el rol es user\", () => {\r\n       \r\n        const rol = obtenerRol(\"juan\");\r\n\r\n       \r\n        const redireccion = rol === \"admin\" ? \"dashboard.html\" : \"clientes.html\";\r\n\r\n       \r\n        expect(redireccion).toBe(\"clientes.html\");\r\n    });\r\n});\r\n"]}