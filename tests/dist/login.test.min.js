"use strict";var login=require("../assets/js/login");describe("Funcionalidad de inicio de sesión",function(){it("debería devolver éxito cuando se proporcionan credenciales válidas",function(){var r,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return r={username:"testuser",password:"password123"},e.next=3,regeneratorRuntime.awrap(login(r));case 3:n=e.sent,expect(n).toEqual({success:!0,message:"Inicio de sesión exitoso"});case 5:case"end":return e.stop()}})}),it("debería devolver un error cuando se proporcionan credenciales inválidas",function(){var r,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return r={username:"testuser",password:"wrongpassword"},e.next=3,regeneratorRuntime.awrap(login(r));case 3:n=e.sent,expect(n).toEqual({success:!1,message:"Credenciales inválidas"});case 5:case"end":return e.stop()}})}),it("debería lanzar un error si falta el nombre de usuario o la contraseña",function(){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return r={username:"",password:""},e.next=3,regeneratorRuntime.awrap(expect(login(r)).rejects.toThrow("Se requieren nombre de usuario y contraseña"));case 3:case"end":return e.stop()}})}),it("debería manejar los errores del servidor de manera adecuada",function(){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return r={username:"testuser",password:"password123"},jest.spyOn(global,"fetch").mockImplementation(function(){return Promise.reject(new Error("Error del servidor"))}),e.next=4,regeneratorRuntime.awrap(expect(login(r)).rejects.toThrow("Error del servidor"));case 4:global.fetch.mockRestore();case 5:case"end":return e.stop()}})})});
//# sourceMappingURL=login.test.min.js.map
