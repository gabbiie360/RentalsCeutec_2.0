{"version":3,"sources":["Reservas.test.js"],"names":["require","validarReserva","validarHorario","simularReserva","describe","test","ahora","Date","fechaInvalida","getTime","toISOString","resultado","fechaReserva","fechaEntrega","expect","toBe"],"mappings":";;eAA2DA,OAAO,CAAC,8BAAD,C;IAA1DC,c,YAAAA,c;IAAgBC,c,YAAAA,c;IAAgBC,c,YAAAA,c;;AAExCC,QAAQ,CAAC,yBAAD,EAA4B,YAAM;AAExCC,EAAAA,IAAI,CAAC,kEAAD,EAAqE,YAAM;AAC7E,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,aAAa,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,OAAN,KAAkB,KAAK,EAAL,GAAU,IAArC,EAA2CC,WAA3C,EAAtB;AACA,QAAMC,SAAS,GAAGV,cAAc,CAAC;AAAEW,MAAAA,YAAY,EAAEJ,aAAhB;AAA+BK,MAAAA,YAAY,EAAEL;AAA7C,KAAD,CAAhC;AACAM,IAAAA,MAAM,CAACH,SAAD,CAAN,CAAkBI,IAAlB,CAAuB,2FAAvB;AACD,GALG,CAAJ;AAOAV,EAAAA,IAAI,CAAC,sEAAD,EAAyE,YAAM;AACjF,QAAMM,SAAS,GAAGV,cAAc,CAAC;AAC/BW,MAAAA,YAAY,EAAE,kBADiB;AAE/BC,MAAAA,YAAY,EAAE;AAFiB,KAAD,CAAhC;AAIAC,IAAAA,MAAM,CAACH,SAAD,CAAN,CAAkBI,IAAlB,CAAuB,2FAAvB;AACD,GANG,CAAJ;AAQAV,EAAAA,IAAI,CAAC,kDAAD,EAAqD,YAAM;AAC7D,QAAMM,SAAS,GAAGT,cAAc,CAAC,kBAAD,EAAqB,kBAArB,CAAhC;AACAY,IAAAA,MAAM,CAACH,SAAD,CAAN,CAAkBI,IAAlB,CAAuB,oEAAvB;AACD,GAHG,CAAJ;AAKAV,EAAAA,IAAI,CAAC,wFAAD,EAA2F,YAAM;AACnG,QAAMM,SAAS,GAAGT,cAAc,CAAC,kBAAD,EAAqB,kBAArB,CAAhC;AACAY,IAAAA,MAAM,CAACH,SAAD,CAAN,CAAkBI,IAAlB,CAAuB,iDAAvB;AACD,GAHG,CAAJ;AAKAV,EAAAA,IAAI,CAAC,iCAAD,EAAoC,YAAM;AAC5C,QAAMM,SAAS,GAAGR,cAAc,CAAC;AAC/BS,MAAAA,YAAY,EAAE,kBADiB;AAE/BC,MAAAA,YAAY,EAAE;AAFiB,KAAD,CAAhC;AAIAC,IAAAA,MAAM,CAACH,SAAD,CAAN,CAAkBI,IAAlB,CAAuB,kCAAvB;AACD,GANG,CAAJ;AAQD,CAnCO,CAAR","sourcesContent":["const { validarReserva, validarHorario, simularReserva } = require('../assets/js/reservastest.js');\r\n\r\ndescribe('Validaciones de Reserva', () => {\r\n\r\n  test('Debe rechazar reserva si la fecha es menor a 1 hora en el futuro', () => {\r\n    const ahora = new Date();\r\n    const fechaInvalida = new Date(ahora.getTime() + 30 * 60 * 1000).toISOString();\r\n    const resultado = validarReserva({ fechaReserva: fechaInvalida, fechaEntrega: fechaInvalida });\r\n    expect(resultado).toBe(\"Las fechas deben ser futuras y la entrega posterior a la reserva (mínimo 1h desde ahora).\");\r\n  });\r\n\r\n  test('Debe rechazar si la fecha de entrega es antes de la fecha de reserva', () => {\r\n    const resultado = validarReserva({\r\n      fechaReserva: \"2025-04-02T15:00\",\r\n      fechaEntrega: \"2025-04-02T14:00\" \r\n    });\r\n    expect(resultado).toBe(\"Las fechas deben ser futuras y la entrega posterior a la reserva (mínimo 1h desde ahora).\");\r\n  });\r\n\r\n  test('Debe rechazar si la reserva o entrega es domingo', () => {\r\n    const resultado = validarHorario(\"2025-04-06T10:00\", \"2025-04-07T12:00\");\r\n    expect(resultado).toBe(\"Las reservas solo se pueden realizar o entregar de lunes a sábado.\");\r\n  });\r\n\r\n  test('Debe rechazar si la hora de reserva es antes de las 09:00 AM o después de las 05:00 PM', () => {\r\n    const resultado = validarHorario(\"2025-04-01T08:00\", \"2025-04-01T12:00\");\r\n    expect(resultado).toBe(\"El horario permitido es de 09:00 AM a 05:00 PM.\");\r\n  });\r\n\r\n  test('Debe aceptar una reserva válida', () => {\r\n    const resultado = simularReserva({\r\n      fechaReserva: \"2025-04-02T10:00\",\r\n      fechaEntrega: \"2025-04-03T15:00\"\r\n    });\r\n    expect(resultado).toBe(\"¡Reserva guardada correctamente!\");\r\n  });\r\n\r\n});\r\n"],"file":"Reservas.test.dev.js"}