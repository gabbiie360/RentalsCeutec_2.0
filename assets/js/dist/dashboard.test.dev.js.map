{"version":3,"sources":["dashboard.test.js"],"names":["require","eliminarUsuario","editarVehiculo","guardarVehiculo","eliminarVehiculo","editarReserva","guardarReserva","eliminarReserva","test","global","confirm","jest","fn","uid","resultado","expect","toEqual","mensaje","id","toHaveProperty","datos","MARCA","MODELO","PLACA","toThrow","Email"],"mappings":"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","sourcesContent":["const { eliminarUsuario, editarVehiculo, guardarVehiculo, eliminarVehiculo, editarReserva, guardarReserva, eliminarReserva } = require(\"./dashboardTest\");\r\n\r\ntest(\"Debería eliminar un usuario\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const uid = \"user123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarUsuario(uid);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ uid, mensaje: \"Usuario eliminado correctamente.\" });\r\n});\r\n\r\ntest(\"Debería editar un vehículo y devolver sus datos\", () => {\r\n    // Arrange\r\n    const id = \"vehiculo1\";\r\n    \r\n    // Act\r\n    const resultado = editarVehiculo(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"MARCA\", \"Toyota\");\r\n    expect(resultado).toHaveProperty(\"MODELO\", \"Corolla\");\r\n    expect(resultado).toHaveProperty(\"PLACA\", \"ABC-123\");\r\n});\r\n\r\ntest(\"Debería guardar un vehículo correctamente\", () => {\r\n    // Arrange\r\n    const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\", PLACA: \"ABC-123\" };\r\n    \r\n    // Act\r\n    const resultado = guardarVehiculo(datos);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"mensaje\", \"Vehículo guardado correctamente.\");\r\n});\r\n\r\ntest(\"Debería lanzar un error si faltan datos al guardar un vehículo\", () => {\r\n    // Arrange\r\n    const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\" }; // Falta la placa\r\n    \r\n    // Act & Assert\r\n    expect(() => guardarVehiculo(datos)).toThrow(\"Todos los campos del vehículo son obligatorios.\");\r\n});\r\n\r\ntest(\"Debería eliminar un vehículo\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const id = \"vehiculo123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarVehiculo(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ id, mensaje: \"Vehículo eliminado correctamente.\" });\r\n});\r\n\r\ntest(\"Debería editar una reserva y devolver sus datos\", () => {\r\n    // Arrange\r\n    const id = \"reserva1\";\r\n    \r\n    // Act\r\n    const resultado = editarReserva(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"Nombre Completo\", \"Juan Pérez\");\r\n    expect(resultado).toHaveProperty(\"Email\", \"juan.perez@example.com\");\r\n});\r\n\r\ntest(\"Debería guardar una reserva correctamente\", () => {\r\n    // Arrange\r\n    const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\", \"Numero de Telefono\": \"12345678\" };\r\n    \r\n    // Act\r\n    const resultado = guardarReserva(datos);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"mensaje\", \"Reserva guardada correctamente.\");\r\n});\r\n\r\ntest(\"Debería lanzar un error si faltan datos al guardar una reserva\", () => {\r\n    // Arrange\r\n    const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\" }; // Falta el teléfono\r\n    \r\n    // Act & Assert\r\n    expect(() => guardarReserva(datos)).toThrow(\"Todos los campos son obligatorios.\");\r\n});\r\n\r\ntest(\"Debería eliminar una reserva\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const id = \"reserva123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarReserva(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ id, mensaje: \"Reserva eliminada correctamente.\" });\r\n});"],"file":"dashboard.test.dev.js"}