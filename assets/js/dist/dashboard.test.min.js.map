{"version":3,"sources":["dashboard.test.js"],"names":["require","eliminarUsuario","editarVehiculo","guardarVehiculo","eliminarVehiculo","editarReserva","guardarReserva","eliminarReserva","test","jest","fn","expect","resultado","toEqual","uid","mensaje","toHaveProperty","MODELO","PLACA","MARCA","datos","toThrow","global","confirm","id","Nombre Completo","Email","Numero de Telefono"],"mappings":"0BAA+HA,QAAQ,mBAA/HC,yBAAAA,gBAAiBC,wBAAAA,eAAgBC,yBAAAA,gBAAiBC,0BAAAA,iBAAkBC,uBAAAA,cAAeC,wBAAAA,eAAgBC,yBAAAA,gBAE3GC,KAAK,8BAFkI,WAA9GN,OAAAA,QAIJO,KAAKC,GAAG,WAAA,OAJJR,IAAgBC,IAAAA,EAAAA,UAAkDG,EAQrEL,gBARqEK,GAEvFK,OAACC,GAAAC,QAAA,CAAAC,IAAAA,EAA+BC,QAAA,uCAEPP,KAAA,kDAAA,WACzB,IAcMI,EAAYV,eAdN,aAMqBa,OAAOH,GAAEI,eAAA,QAAA,UAA1CL,OAAAC,GAAAI,eAAA,SAAA,WATJL,OAAAC,GAAAI,eAAA,QAAA,aAcIR,KAAA,4CAEA,WACA,IAIOI,EAAWI,gBAJAd,CAAAA,MAAAA,SALwCe,OAO1D,UAAAC,MAAA,YAMAP,OAACC,GAAAI,eAAA,UAAD,sCAEgBG,KAAAA,iEAAF,WAAsCD,IAAKE,EAAE,CAAAD,MAAA,SAAAF,OAAA,WAG3DN,OAAMC,WAAAA,OAAST,gBAAkBiB,KALmBC,QAOpD,qDAEHb,KATD,+BAAA,WAYIc,OAAAC,QAAAd,KAAAC,GAAA,WAAA,OAAA,IACA,IAAMU,EAAQ,cAAwCR,EAAAR,iBAAAoB,GAGtDb,OAAOC,GAAAC,QAAA,CAAAW,GAAAA,EAAAT,QAAA,wCACVP,KAND,kDAAA,WASI,IACAI,EAAAP,cADA,YAKAM,OAAMC,GAAYR,eAAgB,kBAElC,cAaAO,OAAOC,GAAWI,eAAe,QAAS,4BAZVD,KAAAA,4CAAS,WAT7C,IAcYH,EAFkDN,eAZ9D,CAAAmB,kBAAA,aAAAC,MAAA,yBAAAC,qBAAA,aAgCIhB,OAAOC,GAAWI,eAAe,UAAW,qCAV/CR,KAVD,iEAAA,WAaI,IAAAY,EAAA,CAAAK,kBAAA,aAAAC,MAAA,0BACiDA,OAAO,WAAA,OAAApB,eAAAc,KAA1CC,QAAA,wCAiBlBb,KAAK,+BAAgC,WAEjCc,OAAOC,QAAUd,KAAKC,GAAG,WAAA,OAAM,IAb/BC,IAAOC,EAAAA,aAIPA,EAAAL,gBAAAiB,GACiDE,OAAOd,GAAAC,QAAA,CAAAW,GAAAA,EAAAT,QAAA","file":"dashboard.test.min.js","sourcesContent":["const { eliminarUsuario, editarVehiculo, guardarVehiculo, eliminarVehiculo, editarReserva, guardarReserva, eliminarReserva } = require(\"./dashboardTest\");\r\n\r\ntest(\"Debería eliminar un usuario\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const uid = \"user123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarUsuario(uid);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ uid, mensaje: \"Usuario eliminado correctamente.\" });\r\n});\r\n\r\ntest(\"Debería editar un vehículo y devolver sus datos\", () => {\r\n    // Arrange\r\n    const id = \"vehiculo1\";\r\n    \r\n    // Act\r\n    const resultado = editarVehiculo(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"MARCA\", \"Toyota\");\r\n    expect(resultado).toHaveProperty(\"MODELO\", \"Corolla\");\r\n    expect(resultado).toHaveProperty(\"PLACA\", \"ABC-123\");\r\n});\r\n\r\ntest(\"Debería guardar un vehículo correctamente\", () => {\r\n    // Arrange\r\n    const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\", PLACA: \"ABC-123\" };\r\n    \r\n    // Act\r\n    const resultado = guardarVehiculo(datos);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"mensaje\", \"Vehículo guardado correctamente.\");\r\n});\r\n\r\ntest(\"Debería lanzar un error si faltan datos al guardar un vehículo\", () => {\r\n    // Arrange\r\n    const datos = { MARCA: \"Toyota\", MODELO: \"Corolla\" }; // Falta la placa\r\n    \r\n    // Act & Assert\r\n    expect(() => guardarVehiculo(datos)).toThrow(\"Todos los campos del vehículo son obligatorios.\");\r\n});\r\n\r\ntest(\"Debería eliminar un vehículo\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const id = \"vehiculo123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarVehiculo(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ id, mensaje: \"Vehículo eliminado correctamente.\" });\r\n});\r\n\r\ntest(\"Debería editar una reserva y devolver sus datos\", () => {\r\n    // Arrange\r\n    const id = \"reserva1\";\r\n    \r\n    // Act\r\n    const resultado = editarReserva(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"Nombre Completo\", \"Juan Pérez\");\r\n    expect(resultado).toHaveProperty(\"Email\", \"juan.perez@example.com\");\r\n});\r\n\r\ntest(\"Debería guardar una reserva correctamente\", () => {\r\n    // Arrange\r\n    const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\", \"Numero de Telefono\": \"12345678\" };\r\n    \r\n    // Act\r\n    const resultado = guardarReserva(datos);\r\n    \r\n    // Assert\r\n    expect(resultado).toHaveProperty(\"mensaje\", \"Reserva guardada correctamente.\");\r\n});\r\n\r\ntest(\"Debería lanzar un error si faltan datos al guardar una reserva\", () => {\r\n    // Arrange\r\n    const datos = { \"Nombre Completo\": \"Juan Pérez\", Email: \"juan.perez@example.com\" }; // Falta el teléfono\r\n    \r\n    // Act & Assert\r\n    expect(() => guardarReserva(datos)).toThrow(\"Todos los campos son obligatorios.\");\r\n});\r\n\r\ntest(\"Debería eliminar una reserva\", () => {\r\n    // Arrange\r\n    global.confirm = jest.fn(() => true);\r\n    const id = \"reserva123\";\r\n    \r\n    // Act\r\n    const resultado = eliminarReserva(id);\r\n    \r\n    // Assert\r\n    expect(resultado).toEqual({ id, mensaje: \"Reserva eliminada correctamente.\" });\r\n});"]}