{"version":3,"sources":["Reservastest.js"],"names":["validarReserva","datos","fechaReserva","fechaEntrega","ahora","Date","ahoraMasUnaHora","getTime","validarHorario","diasPermitidos","horaMin","horaMax","diaReserva","getDay","horaReserva","getHours","diaEntrega","horaEntrega","includes","simularReserva","resultado","module","exports"],"mappings":";;AAAA,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,MACnBC,YADmB,GACYD,KADZ,CACnBC,YADmB;AAAA,MACLC,YADK,GACYF,KADZ,CACLE,YADK;AAE3B,MAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,MAAMC,eAAe,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,OAAN,KAAkB,KAAK,EAAL,GAAU,IAArC,CAAxB;;AAEA,MAAI,IAAIF,IAAJ,CAASH,YAAT,IAAyBI,eAAzB,IAA4C,IAAID,IAAJ,CAASF,YAAT,KAA0B,IAAIE,IAAJ,CAASH,YAAT,CAA1E,EAAkG;AAC9F,WAAO,2FAAP;AACH;;AAED,SAAO,QAAP;AACH;;AAED,SAASM,cAAT,CAAwBN,YAAxB,EAAsCC,YAAtC,EAAoD;AAChD,MAAMM,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAvB,CADgD,CACL;;AAC3C,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEA,MAAMC,UAAU,GAAG,IAAIP,IAAJ,CAASH,YAAT,EAAuBW,MAAvB,EAAnB;AACA,MAAMC,WAAW,GAAG,IAAIT,IAAJ,CAASH,YAAT,EAAuBa,QAAvB,EAApB;AACA,MAAMC,UAAU,GAAG,IAAIX,IAAJ,CAASF,YAAT,EAAuBU,MAAvB,EAAnB;AACA,MAAMI,WAAW,GAAG,IAAIZ,IAAJ,CAASF,YAAT,EAAuBY,QAAvB,EAApB;;AAEA,MAAI,CAACN,cAAc,CAACS,QAAf,CAAwBN,UAAxB,CAAD,IAAwC,CAACH,cAAc,CAACS,QAAf,CAAwBF,UAAxB,CAA7C,EAAkF;AAC9E,WAAO,oEAAP;AACH;;AAED,MAAIF,WAAW,GAAGJ,OAAd,IAAyBI,WAAW,IAAIH,OAAxC,IAAmDM,WAAW,GAAGP,OAAjE,IAA4EO,WAAW,IAAIN,OAA/F,EAAwG;AACpG,WAAO,iDAAP;AACH;;AAED,SAAO,QAAP;AACH;;AAED,SAASQ,cAAT,CAAwBlB,KAAxB,EAA+B;AAC3B,MAAImB,SAAS,GAAGpB,cAAc,CAACC,KAAD,CAA9B;AACA,MAAImB,SAAS,KAAK,QAAlB,EAA4B,OAAOA,SAAP;AAE5BA,EAAAA,SAAS,GAAGZ,cAAc,CAACP,KAAK,CAACC,YAAP,EAAqBD,KAAK,CAACE,YAA3B,CAA1B;AACA,MAAIiB,SAAS,KAAK,QAAlB,EAA4B,OAAOA,SAAP;AAE5B,SAAO,kCAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAEtB,EAAAA,cAAc,EAAdA,cAAF;AAAkBQ,EAAAA,cAAc,EAAdA,cAAlB;AAAkCW,EAAAA,cAAc,EAAdA;AAAlC,CAAjB","sourcesContent":["function validarReserva(datos) {\r\n    const { fechaReserva, fechaEntrega } = datos;\r\n    const ahora = new Date();\r\n    const ahoraMasUnaHora = new Date(ahora.getTime() + 60 * 60 * 1000);\r\n    \r\n    if (new Date(fechaReserva) < ahoraMasUnaHora || new Date(fechaEntrega) <= new Date(fechaReserva)) {\r\n        return \"Las fechas deben ser futuras y la entrega posterior a la reserva (mínimo 1h desde ahora).\";\r\n    }\r\n    \r\n    return \"válido\";\r\n}\r\n\r\nfunction validarHorario(fechaReserva, fechaEntrega) {\r\n    const diasPermitidos = [1, 2, 3, 4, 5, 6]; // Lunes a sábado\r\n    const horaMin = 9;\r\n    const horaMax = 17;\r\n\r\n    const diaReserva = new Date(fechaReserva).getDay();\r\n    const horaReserva = new Date(fechaReserva).getHours();\r\n    const diaEntrega = new Date(fechaEntrega).getDay();\r\n    const horaEntrega = new Date(fechaEntrega).getHours();\r\n\r\n    if (!diasPermitidos.includes(diaReserva) || !diasPermitidos.includes(diaEntrega)) {\r\n        return \"Las reservas solo se pueden realizar o entregar de lunes a sábado.\";\r\n    }\r\n\r\n    if (horaReserva < horaMin || horaReserva >= horaMax || horaEntrega < horaMin || horaEntrega >= horaMax) {\r\n        return \"El horario permitido es de 09:00 AM a 05:00 PM.\";\r\n    }\r\n\r\n    return \"válido\";\r\n}\r\n\r\nfunction simularReserva(datos) {\r\n    let resultado = validarReserva(datos);\r\n    if (resultado !== \"válido\") return resultado;\r\n    \r\n    resultado = validarHorario(datos.fechaReserva, datos.fechaEntrega);\r\n    if (resultado !== \"válido\") return resultado;\r\n    \r\n    return \"¡Reserva guardada correctamente!\";\r\n}\r\n\r\nmodule.exports = { validarReserva, validarHorario, simularReserva };"],"file":"Reservastest.dev.js"}